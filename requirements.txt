import React, { useState, useEffect } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useRouter } from 'next/router';
import { getAuth, signInWithPhoneNumber, RecaptchaVerifier, signOut } from "firebase/auth";
import { getFirestore, doc, getDoc, setDoc, collection, getDocs, updateDoc, deleteDoc } from "firebase/firestore";
import firebaseApp from "@/firebase/config";
import toast from "react-hot-toast";
import { Spinner } from "@/components/ui/spinner";
import axios from 'axios';
import Link from 'next/link';

const auth = getAuth(firebaseApp);
const db = getFirestore(firebaseApp);

const TifChMcSystem = () => {
    const router = useRouter();
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [files, setFiles] = useState({
        medicalReport: null,
        patientID: null,
        referralForm: null,
        specialtyHospitalForm: null,
        other: null
    });
    const [errors, setErrors] = useState({
        medicalReport: false,
        patientID: false,
        referralForm: false
    });

    useEffect(() => {
        const fetchUser = async () => {
            const userId = auth.currentUser?.uid;
            if (!userId) {
                router.push('/');
                return;
            }
            const userDoc = await getDoc(doc(db, "users", userId));
            if (userDoc.exists()) {
                setUser(userDoc.data());
            }
            setLoading(false);
        };
        fetchUser();
    }, []);

    const handleFileChange = (e, fileType) => {
        setFiles({ ...files, [fileType]: e.target.files[0] });
        setErrors({ ...errors, [fileType]: false });
    };

    const handleSubmit = async () => {
        let newErrors = {
            medicalReport: !files.medicalReport,
            patientID: !files.patientID,
            referralForm: !files.referralForm
        };
        
        setErrors(newErrors);
        
        if (Object.values(newErrors).includes(true)) {
            toast.error("يرجى تحميل جميع الملفات الإلزامية");
            return;
        }

        try {
            const userId = auth.currentUser?.uid;
            await setDoc(doc(db, "referrals", userId + Date.now()), {
                userId,
                files,
                status: "pending",
                timestamp: new Date()
            });
            
            toast.success("تم إرسال الإحالة بنجاح");
            router.push('/dashboard');
        } catch (error) {
            toast.error("حدث خطأ أثناء إرسال الإحالة");
            console.error("خطأ في إرسال الإحالة: ", error);
        }
    };

    if (loading) return <Spinner />;

    return (
        <div className="p-6">
            <h2 className="text-xl font-bold mb-4">نظام أهلية العلاج والتنسيق الطبي</h2>
            <p>مرحبًا {user?.phone}</p>
            <p>القسم: {user?.department || "غير محدد"}</p>
            {user?.department && (
                <div>
                    <Input type="file" accept="application/pdf" onChange={(e) => handleFileChange(e, 'medicalReport')} className={`mb-2 ${errors.medicalReport ? 'border-red-500' : ''}`} />
                    {errors.medicalReport && <p className="text-red-500">التقرير الطبي (إلزامي)</p>}
                    
                    <Input type="file" accept="application/pdf" onChange={(e) => handleFileChange(e, 'patientID')} className={`mb-2 ${errors.patientID ? 'border-red-500' : ''}`} />
                    {errors.patientID && <p className="text-red-500">بيانات هوية المريض (إلزامي)</p>}
                    
                    <Input type="file" accept="application/pdf" onChange={(e) => handleFileChange(e, 'referralForm')} className={`mb-2 ${errors.referralForm ? 'border-red-500' : ''}`} />
                    {errors.referralForm && <p className="text-red-500">نموذج الإحالة (إلزامي)</p>}
                    
                    <Input type="file" accept="application/pdf" onChange={(e) => handleFileChange(e, 'specialtyHospitalForm')} className="mb-2" />
                    <p>نموذج المستشفيات التخصصية والعسكرية (اختياري)</p>
                    
                    <Input type="file" accept="application/pdf" onChange={(e) => handleFileChange(e, 'other')} className="mb-2" />
                    <p>أخرى (اختياري)</p>
                    
                    <Button onClick={handleSubmit} className="mt-4 bg-blue-500 text-white">
                        إرسال الإحالة
                    </Button>
                </div>
            )}
            {user?.department === "أهلية العلاج والتنسيق الطبي" && (
                <Button onClick={() => router.push('/decisions-list')} className="mt-4 bg-green-500 text-white">
                    سجل القرارات الطبية
                </Button>
            )}
            <Button onClick={() => signOut(auth).then(() => router.push('/'))} className="mt-4 bg-gray-500 text-white">
                تسجيل الخروج
            </Button>
        </div>
    );
};

export default TifChMcSystem;
